import React, { useState, useEffect } from "react"
import axios from "axios"

type Tag = {
  id: number
  name: string
  label: string
  description?: string
  type?: string // ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ type (–µ—Å–ª–∏ –æ–Ω–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
}

type Props = {
  onInsert: (value: string) => void
}

export const VariablePanel: React.FC<Props> = ({ onInsert }) => {
  const [tags, setTags] = useState<Tag[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [showModal, setShowModal] = useState(false)
  const [newFieldType, setNewFieldType] = useState("text")
  const [newFieldName, setNewFieldName] = useState("")
  const [newFieldTag, setNewFieldTag] = useState("")

  useEffect(() => {
    axios.get("http://localhost:8080/tags/all")
      .then((res) => {
        if (Array.isArray(res.data)) {
          setTags(res.data)
        } else {
          console.warn("‚ö†Ô∏è /tags/all –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤:", res.data)
        }
      })
      .catch((err) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:", err)
      })
  }, [])

  const filteredTags = tags.filter((tag) =>
    tag.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    tag.label.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const handleAddField = () => setShowModal(true)

  const handleModalSubmit = async () => {
    const label = newFieldName.trim()
    const rawTag = newFieldTag.trim()

    if (!label || !rawTag) {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ —Ç–µ–≥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
      return
    }

    const cleanTagName = rawTag.replace(/{{\s*|\s*}}/g, "") // —É–±–∏—Ä–∞–µ–º {{ }}

    try {
      const response = await axios.post("http://localhost:8080/tags/create", {
        name: cleanTagName, // üëà –ë–ï–ó —Å–∫–æ–±–æ–∫ –≤ –ë–î
        label,
        description: newFieldType === "text" ? "–°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç" : "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",
        type: newFieldType
      })

      const createdTag = response.data
      setTags(prev => [...prev, createdTag])

      // üëá –≤—Å—Ç–∞–≤–ª—è–µ–º —Å {{}} –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
      onInsert(`{{${createdTag.name}}}`)

      setShowModal(false)
      setNewFieldType("text")
      setNewFieldName("")
      setNewFieldTag("")
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞:", err)
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞")
    }
  }


  const getReadableType = (type?: string) => {
    switch (type) {
      case "text":
        return "–¢–µ–∫—Å—Ç"
      case "select":
        return "–í—ã–±–æ—Ä"
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
  }

  return (
    <div className="variable-panel">
      <div className="search-input-wrapper">
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="variable-search-input"
        />
        <img src="/document/search.svg" alt="–ü–æ–∏—Å–∫" className="search-icon" />
      </div>

      {filteredTags.length > 0 ? (
        filteredTags.map((tag) => (
          <button
            key={tag.id}
            className="variable-button"
            onClick={() => onInsert(`{{${tag.name}}}`)}
            title={tag.label || tag.description || ""}
          >
            <span className="drag-icon">‚â°</span>
            {`{{${tag.name}}}`}
            <span style={{ marginLeft: "8px", fontSize: "12px", color: "#888" }}>
              [{getReadableType(tag.type)}]
            </span>
          </button>
        ))
      ) : (
        <div className="no-results">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
      )}

      <div style={{ marginTop: "16px", textAlign: "center" }}>
        <button
          className="add-variable-button"
          onClick={handleAddField}
          style={{
            padding: "8px 12px",
            borderRadius: "6px",
            backgroundColor: "#615EF0",
            color: "#fff",
            border: "none",
            cursor: "pointer",
            fontSize: "14px"
          }}
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ
        </button>
      </div>

      {showModal && (
        <div style={modalOverlay}>
          <div style={modalBox}>
            <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ</h3>

            <label>
              –¢–∏–ø –ø–æ–ª—è:
              <select
                value={newFieldType}
                onChange={(e) => setNewFieldType(e.target.value)}
                style={selectStyle}
              >
                <option value="text">–°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç</option>
                <option value="select">–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</option>
              </select>
            </label>

            <label style={{ marginTop: "10px" }}>
              –ù–∞–∑–≤–∞–Ω–∏–µ:
              <input
                type="text"
                value={newFieldName}
                onChange={(e) => setNewFieldName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                style={inputStyle}
              />
            </label>

            <label style={{ marginTop: "10px" }}>
              –¢–µ–≥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:
              <input
                type="text"
                value={newFieldTag}
                onChange={(e) => setNewFieldTag(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä {{—Ñ–∏–æ_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞}}"
                style={inputStyle}
              />
            </label>

            <div style={{ marginTop: "20px", display: "flex", gap: "10px", justifyContent: "flex-end" }}>
              <button onClick={() => setShowModal(false)}>–û—Ç–º–µ–Ω–∞</button>
              <button onClick={handleModalSubmit} style={{ backgroundColor: "#615EF0", color: "#fff" }}>
                –î–æ–±–∞–≤–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ===== –°—Ç–∏–ª–∏ =====
const modalOverlay: React.CSSProperties = {
  position: "fixed",
  top: 0, left: 0, right: 0, bottom: 0,
  backgroundColor: "rgba(0, 0, 0, 0.4)",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  zIndex: 1000
}

const modalBox: React.CSSProperties = {
  backgroundColor: "#fff",
  padding: "20px",
  borderRadius: "8px",
  width: "300px",
  boxShadow: "0 4px 12px rgba(0,0,0,0.2)"
}

const inputStyle: React.CSSProperties = {
  width: "100%",
  padding: "6px",
  marginTop: "4px",
  fontSize: "14px",
  borderRadius: "4px",
  border: "1px solid #ccc",
  boxSizing: "border-box"
}

const selectStyle: React.CSSProperties = {
  width: "100%",
  padding: "6px",
  marginTop: "4px",
  fontSize: "14px",
  borderRadius: "4px",
  border: "1px solid #ccc"
}
